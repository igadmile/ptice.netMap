var map = L.map('map', { fullscreenControl: true,zoomControl:false }).fitBounds([[44.2626173655,14.7660291146],[44.9415644853,16.2414966344]]);
var hash = new L.Hash(map); //add hashes to html address to easy share locations
var additional_attrib = 'Created as part of Wildlife Watch project, supported by European Union';
var additional_attrib2 = 'Created as part of Wildlife Watch project, supported by European Union, imagery prvided by <a href="http://www.dgu.hr/">Državna Geodetska uprava</a>';

// home icon
var zoomHome = L.Control.zoomHome({position: 'topleft'});
zoomHome.addTo(map);

var basemap_0 = L.tileLayer.wms('http://geoportal.dgu.hr/wms', {
    layers: 'DOF',
    format: 'image/jpeg',
    attribution: additional_attrib2
});

var basemap_1 = L.tileLayer.wms('http://geoportal.dgu.hr/wms', {
    layers: 'TK25',
    format: 'image/jpeg',
    attribution: additional_attrib2
});

var basemap_2 = L.tileLayer('http://{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png', {
    attribution: additional_attrib
});

basemap_2.addTo(map);

//dodavanje fucnkcije za promijenu boje
function highlight (layer) {
    layer.setStyle({
        weight: 6,
        color: 'yellow',
        fillColor:'yellow',
        opacity: 0.7,
        fillOpacity: 0.7
    });
    layer.bringToFront();
}

//dodavanje fucnkcije za vraćanje boje na staro
function dehighlight (layer) {
    if (selected === null || selected._leaflet_id !== layer._leaflet_id) {
        bike.setStyle(doStylebike(layer));
        hike.setStyle(doStylehike(layer));
    }
}

var selected = null;

function select (layer) {
    // See if there is already a selection
    if (selected !== null) {
        // Store for now
        var previous = selected;
    }
    // Set new selection
    selected = layer;
    // If there was a previous selection
    if (previous) {
        // Dehighlight previous
        dehighlight(previous);
    }
}

//dodavanje popupa za mhouse
function onEachFeaturemhouse(feature, marker) {
    var popupContent = '<table><tr><th scope="row">name</th><td>' + Autolinker.link(String(feature.properties.name)) + '</td></tr></table>';
    marker.bindPopup(popupContent);
}

// elevation window
var el = L.control.elevation({
    position: "bottomright",
    interpolation: "basis-open"
});
el.addTo(map);

function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
}

//sklapanje gornjih funkcija u oneachfeature za biciklističke staze
function onEachFeature(feature, layer) {
    layer.on({
        'mouseover': function (e) {
            highlight(e.target);
        },
        'mouseout': function (e) {
            dehighlight(e.target);
        },
        'click': function (e) {
            select(e.target);
            el.clear();
            el.addData(feature);
            zoomToFeature(e);
        },
        'popupclose':function (e) {
            selected=null;
            bike.resetStyle(layer);
            hike.resetStyle(layer);
        }
    });
    var popupContent = '<table><tr><th scope="row">name</th><td>' + Autolinker.link(String(feature.properties.name)) + '</td></tr></table>';
    layer.bindPopup(popupContent);
}

function doStylehike(feature) {
    return {
            weight: 3.3,
            color: '#7b8db2',
            dashArray: '',
            opacity: 1.0,
            fillOpacity: 1.0
    };
}

var hike = new L.geoJson(exp_hike,{
    onEachFeature: onEachFeature,
    style: doStylehike
    });

hike.addTo(map);

function doStylebike(feature) {
    return {
            weight: 3.3,
            color: '#df824f',
            dashArray: '',
            opacity: 1.0,
            fillOpacity: 1.0
    };
}

var bike = new L.geoJson(exp_bike,{
    onEachFeature: onEachFeature,
    style: doStylebike
});

bike.addTo(map);

var mhouseMarker = L.MakiMarkers.icon({
    icon: "campsite",
    color: "#969559",
    size: "m"
});

var mhouse = new L.geoJson(exp_mhouse,{
    onEachFeature: onEachFeaturemhouse,
    pointToLayer: function (feature, latlng) {
	return L.marker(latlng, {
            icon: mhouseMarker,
            riseOnHover: true
            });
    }
});

var accommodationMarker = L.MakiMarkers.icon({
    icon: "building",
    color: "#004e9e",
    size: "m"
});

var accommodation = new L.geoJson(exp_accommodation,{
    onEachFeature: onEachFeaturemhouse,
    pointToLayer: function (feature, latlng) {
	return L.marker(latlng, {
            icon: accommodationMarker,
            riseOnHover: true
            });
    }
});

accommodation.addTo(map);

var sceneryMarker = L.MakiMarkers.icon({
    icon: "camera",
    color: "#009e4e",
    size: "m"
});

var scenery = new L.geoJson(exp_scenery,{
    onEachFeature: onEachFeaturemhouse,
    pointToLayer: function (feature, latlng) {
        return L.marker(latlng, {
            icon: sceneryMarker,
            riseOnHover: true
            });
    }
});

var baseMaps = {
    'Thunderforest Landscape': basemap_2,
    'TK25':basemap_1,
    'Digital Ortofoto':basemap_0
};

map.on('viewreset', onZoomend);
function onZoomend(){
    if(map.getZoom()<12)
     {map.removeLayer(scenery);
      map.removeLayer(mhouse);
    }
    if(map.getZoom()>=12)
     {map.addLayer(scenery);
      map.addLayer(mhouse);
    }
 }

// locate control
L.control.locate().addTo(map);

L.control.layers(baseMaps,{"Smještaj": accommodation,"Planinarske kuće": mhouse,"Vidikovci": scenery,"Biciklističke staze": bike,"Planinarske staze": hike},{collapsed:false}).addTo(map);

L.control.scale({options: {position: 'bottomleft',maxWidth: 100,metric: true,imperial: false,updateWhenIdle: false}}).addTo(map);
